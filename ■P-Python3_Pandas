- Python的資料分析流程:
- Pandas資料處理 → NumPy科學計算 → ◎StatsModels統計分析 ◎SciKit-Learn機器學習 ◎Keras人工智慧

■Pandas(Python裡的Excel)

- Pandas裡有2種基本資料型態：

   1.Dataframe，如同Excel的一張表格。
   2.Serices，如同list、array。
  
▲讀入csv檔案 【pd.read_csv("檔名.csv")】

df = pd.read_csv("檔名.csv")

▲查看檔案開頭或結尾  【.head()  .tail()】

df.head(3)  #顯示的頭行數
df.tail(3)  #顯示的尾行數

▲查看資訊或大小  【.info()  .shape】

df.info()
df.shape

▲選擇資料    【["欄名"]  ["欄名"][0:4]】

df["欄位名稱1", "欄位名稱2"]        #或是用 df.欄位名稱。選擇某欄
df["欄位名稱"][0:4]   #選擇某欄的某幾列

▲將資料轉成NumPy的array    【.欄名.values】

cg = df.欄位名稱.values

▲轉成NumPy做計算    

cg.mean()
cg.std()

▲在Pandas畫圖    【.欄名.plot(kind="hist")】

df.欄位名稱.plot()
df.欄位名稱.plot(kind="hist")  #直方圖

▲增加欄位   【["新欄名"] = 】

df["新欄位名稱1"] = df.sum(axis = 1)
df["新欄位名稱2"] = df.欄名1 + df.欄名2 + df.欄名3*2

▲新增資料或刪除  【.insert(新增在第幾行, 新增的欄名, 新增的值)】

df.insert(3, column = "欄名", values="值")  
df1 = df.dropna()    #刪除NaN資料

▲空白資料填充   【.fillna(欲取代NaN為什麼值)】

df2 = df.fillna(0)   #將NaN值以0取代

▲排序     【.sort_values(by = ["排序順位第一的欄位名","排序順位第二的欄位名"], ascending = False)】

df2 = df.sort_values(by = ["year","month"], ascending = False)
df2.head(10)

▲篩選出想要的資料  【[.欄名 條件]   [{.欄名 條件 邏輯運算子 .欄名 條件}]】

df2[df2.欄名1 == 15]
df2[{df2.欄名1 == 15} & {df2.欄名2 == 15}]       #or的話用"|"

mask = df2["欄名"].isin(["值1", "值2", "值3"])    #篩選指定欄位中的某些值
mask1 = df2["欄名"].isnull()     #篩選出是Null值的資料
mask2 = df2["欄名"].notnull()     #篩選出不是Null值的資料

df2[df2["欄名"].between("值1", "值2")]  #篩選出介於某範圍的值

▲刪除行   【.drop("欲刪除的欄名", axis=1, inplace = True)】

df2.drop("欲刪除的欄名", axis=1)   #原本的df2並不會改變
df2.drop("欲刪除的欄名", axis=1, inplace = True)   #使原本的df2改變

▲刪除列    【.drop(欲刪除的列)  .drop( [ .欄名 條件].index)】

df2.drop(5)
df2.drop(df2[df2.欄名=="值"].index)   #刪除條件的資料
df2[df2.欄名 != "值"]                 #保留不合條件的資料

▲重新命名欄位或索引名稱   【rename(columns = {舊欄名1:新欄名1, 舊欄名2:新欄名2}, inplace = True)】

bond.rename(columns = {"Year" : "Release Date", "Box" : "Fate"}, inplace = True)

▲群組操作    【.groupby(欲分組的依據)】

fortune = pd.read_csv("./csv/fortune1000.csv",index_col="Rank")  #匯入資料

sector = fortune.groupby("Sector")    # 群組化資料
sector.size()                         # 可以看出各組別的大小
sector.groups                         # 查看群組結果
sector.get_group("Energy")            # 取出想要找的類別

   - 群組運算
   
sector.groupby("Sector").sum()
sector.groupby(["Sector", "Box"]).sum()

----------------------------------------------------------------------------------------

▲索引 

  - 載入檔案時更改索引 【pd.read_csv("檔名.csv", index_col = "欲變成索引的欄名")】

bond = pd.read_csv("csv/AFG.csv", index_col = "Film")
bond.index            #查看索引

  - 載入檔案後，更改索引 【.set_index(, inplace = True)】

bond.set_index("Film", inplace = True)   

  - 重置索引 【.reset_index(, inplace = True)】

bond.reset_index(inplace = True)

  - 由loc[]來以index取出資料 【.loc["index"]】

bond.loc[["Goldfinger", "From Russia with love"]]   #取出兩部電影的資訊
bond.loc["Goldfinger", "Actor"]       #取出Goldfinger的資訊，以及它的Actor
  
  - 由iloc[]來以index位置取出資料 【.iloc[數字]】
  
bond.iloc[[0, 4]]  #取得index位置0跟4的資料
bond.iloc[0:4]     #取得index位置0到3的資料

  - 重新命名索引名 【rename(index = {舊欄名1:新欄名1, 舊欄名2:新欄名2}, inplace = True)】

bond.rename(index = {"Year" : "Release Date", "Box" : "Fate"}, inplace = True)

  - 刪除 【.drop(labels = ["欄名1","欄名2"], axis = "columns")】

bond.drop(labels = ["Box office", "Actor"], axis = "columns")

  - 多層索引 【.drop(labels = ["欄名1","欄名2"], axis = "columns")】
  
bigmac = pd.read_csv("./csv/bigmac.csv",parse_dates=["Date"]) 
bigmac.set_index(keys = ["Date","Country"],inplace=True)    # 設定Date,Country為索引
bigmac.index.names   # 查看有哪些索引
type(bigmac.index)   # 查看索引的類型

bigmac = pd.read_csv("./csv/bigmac.csv",parse_dates=["Date"],index_col=["Date","Country"])
bigmac.sort_index(inplace=True)           # 依照索引排序資料
bigmac.index.get_level_values(0)          # 可得到第0個索引的資料，也就是Date
bigmac.index.get_level_values("Date")     # 也可以直接在括弧中放入要查詢的索引名稱
bigmac.index.set_names(["Day","Location"],inplace=True)  # 更改索引的名稱

---------------------------------------------------------------------------------------

▲字串處理  

   - Python基本操作
   
.lower()    # 全部變小寫
.upper()    # 全部變大寫
.title()    # 第一個字變大寫
len()       # 字串長度
"Hello world".replace("l","!")        # 把第一個參數改成第二個參數
"Hello my name is jiayi".split(" ")   # 以空隔分開字串

   - Pandas字串處理(用Pandas做字串處理，要先用.str轉換)
   
      - 基本操作
   
chicago = pd.read_csv("./csv/chicago.csv")
chicago["Department"] = chicago["Department"].astype("category")  #轉成category資料型態，節省記憶體
chicago["Name"] = chicago["Name"].str.title()                 # 第一個字變大寫
type(chicago["Name"].str)                                     # 查看資料類別
chicago["Name"] = chicago["Name"].str.lower().head(3)         # 全部變小寫
chicago["Name"] = chicago["Name"].str.upper().head(3)         # 全部變大寫
chicago["Department"].str.len().head()                        # 字串長度

chicago = pd.read_csv("csv/chicago.csv").dropna(how="all")
chicago["Department"] = chicago["Department"].astype("category")
chicago["Department"] = chicago["Department"].str.replace("MGMNT","MANAGEMENT") # 替換字串

      - 過濾資料
        
mask = chicago["Position Title"].str.lower().str.contains("water")     # 取出有特定字串的資料
chicago[mask]

mask = chicago["Position Title"].str.lower().str.startswith("water")   # 取出字串開頭符合的資料
chicago[mask]
mask = chicago["Position Title"].str.lower().str.endswith("water")     # 取出字串結尾符合的資料
chicago[mask]

      - 切割資料
      
chicago["Name"].str.split(",")                            # 用","將資料分開
chicago["Name"].str.split(",").str.get(0).str.title()     # 分開後將資料取出來

--------------------------------------------------------------------------------------------

▲ 資料視覺化

import pandas as pd

# 為了使用yahoo的資料所以執行下列程式碼：
from pandas_datareader import data
import pandas_datareader.data as web

# 如果顯示沒有pandas_datareader的話：
conda install pandas_datareader
or 
pip install pandas_datareader

# import datetime：
import datetime

# 若pandas_datareader無法使用：
import pandas as pd
pd.core.common.is_list_like = pd.api.types.is_list_like
import pandas_datareader as web

   - Remote Data Access

# 定義資料
start = datetime.datetime(2016, 1, 1)
end = datetime.datetime(2017, 1, 1)
data = web.DataReader("F", 'morningstar', start, end)  # 因yahoo停止運作，改成morningstar，F表示morningstar的Finance資料

# 畫圖
data.plot()
data.plot(y="Close")  # 或data["Close"].plot() 或data[["High","Low"]].plot()

--------------------------------------------------------------------------------------------

★用Pandas來玩股票

- 有一個從Pandas獨立出來的套件叫pandas-datareader，目前看起來在Yahoo!還可以用

- 在終端機執行下列程式碼：

1.若沒安裝過
conda install pandas-datareader
2.安裝過但很久沒更新
conda update pandas-datareader

- 讀取APPLE股票資料
import pandas-datareader as pdr
df = pdf.get_data_yahoo("AAPL")

- 只要最近300期的資料
df = df[-300:]

- 簡單移動平均

   -設定windows大小
df.Close.rolling(20)

   -收盤價格及其移動平均線
df.Close.plot()         #收盤價格
df.Close.rolling(20).mean().plot()

   -再增加60期移動平均線
df.Close.plot(legend = True)   #顯示圖例
df.Close.rolling(20).mean().plot(label = "$MA_{20}$", legend = True)  #"$MA_{20}$"支援LaTeX
df.Close.rolling(60).mean().plot(label = "$MA_{60}$", legend = True)

   -準備做預測，將分析的重點轉成NumPy的array
adj_close = df.Close.values
x = adj_close[:-1]
y = adj_close[1:]

plt.scatter(X, Y, alpha=0.5)
