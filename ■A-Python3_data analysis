■資料分析(Data Analysis)

◆相關套件

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

◆zip()
如果我們想要依照標號將2組資料合併的話，可以使用zip()

x = [0.8, 1.2, 2.1, 2.8]
y = [2, -5, 3.2, 5]

list(zip(x, y)) #輸出為 [(0.8,2),(1.2,-5),(2.1,3.2),(2.8,5)]

◇如果想要反過來做的話，也是用zip()

points = [(0.8,2),(1.2,-5),(2.1,3.2),(2.8,5)]
x, y = zip(*points)          #unzip()和zip()的概念其實是相同的

◆互動式介面

◇第一個例子:
from ipywidgets import interact
  def f(x):
    print(x)
  interact(f, x=3)
  interact(f, x=3.)    #浮點數數值的滑桿
  interact(f, list("ABC"))  #下拉式選單

◇如果互動沒有反應時...在終端機執行...
jupyter nbextension enable --py widgetsnbextension

◇互動式另一個例子
def move(n = 1):            #設定預設值
    print(" "*n, "oooo")
       
interact(move, n = (1, 50))
   
◇視覺化的互動
x = np.linspace(-5, 5, 1000)
  
def draw(n = 1):
    y = np.sinc(n*x)
    plt.plot(x, y, lw = 3)
    plt.show()         #一般在Jupyter Notebook畫圖，並不需要這行
      
interact(draw, n = (1., 10.))
  
◆NumPy
#陣列導向的程式設計
import numpy as np

 ◇陣列和列表很像

mylist = [1, 2, 3, 4]
myarr = np.array(mylist)


 ◇陣列可直接做運算(+ - * /)

  - 每個同學成績加5分
grades = np.array[(87, 65, 77, 93)]
grades + 5

    -查詢到商品的美金，想要知道等於台幣多少
prices = np.array([996.5, 596.95, 796.95]) 
prices * 29.99

    -學期最終成績計算
grades = np.array[(87, 65, 77)]
weights = np.array[(0.2, 0.35, 0.45)]

weighted_grades = grades * weights   #這兩行其實可以換成內積，如np.dot(grades, weights)
weighted_grades.sum()

  ◇快速產生陣列的方法
x = np.linspace(0, 10, 100)   #np.linspace(a, b, c)  a是起始，b是結束，c是間隔
A = np.arange(10)             #輸出[(1,...,10)]

    -更改陣列維度
A.shape                       #輸出(10,)，查看維度
A.shape = (2,5)               #更改維度，變成2維，每個維度有5個元素
A.reshape(5,2)                #A本身不會改變，A.reshape(a,b)的a*b要等於總數，可將a或b設為-1，由Python自己計算

  ◇axis的概念
#axis是指運算方向。在二維陣列中有2個方向，沿行(axis = 0)、沿列(axis = 1)。類似矩陣的東西都是「先列後行」

  ◇二維陣列求元素的和
A = array([[0,1,2],
           [3,4,5]])
A.sum()
A.sum(axis = 0)    #計算每行的和
A.sum(axis = 1)    #計算每列的和

  ◇陣列過濾器
L = np.array([3, -2, -1, 5, 7, -3])
L > 0              #產生L各元素是否>0的bool陣列
L[L>0]             #直接過濾出>0的L元素陣列

  ◇陣列切片
x = np.arange(10)
x[2:5]           #產生索引值2開始到5停止的元素，不含索引值=5本身
x.shape = (2,5)
x[:,1:3]         #先列後行 
x[1:,1:3]

  ◇NumPy的zip與unzip
#zip
x = np.array([1,2,3,4])
y = np.array([5,6,7,8])

T = np.c_[x,y]

#unzip
x = T[:, 0]
y = T[:, 1]

◆Matplotlib
import matplotlib.pyplot as plt

  1. plt.plot

  ◇首先來畫幾張圖
#畫圖語法：plt.plot(x, y)，x、y分別是xy座標的list或array

plt.plot(np.random.randn(100))      #畫標準常態分佈隨機取100個點
plt.plot([3,-5,7,2])                #若沒指定x軸的值，則自動由0起始間隔為1
plt.plot([0.8,1.2,2.1,2.8],[2,-5,3.2,5])

x = np.linspace(-10,10,100)
y = np.sin(x)
plt.plot(x,y)

  ◇變色
plt.plot(x, y, "r")  #"r"是紅色、"b"是藍色、"g"是綠色、"c"是藍綠色、"m"是紫色、"y"是黃色、"k"是黑色、"w"是白色

  ◇線條樣式
plt.plot(x, y, "--")  #"--"是一般虛線、"-."是虛加點的線、":"是很多點組成的線、"o"是比":"更粗的點構成的線、"^"是由三角形點構成的線、"s"是正方形點構成的線

  ◇線條樣式的變色
plt.plot(x, y, "ro")  #"g--"、"m^"等

  ◇常用參數設定
# c是顏色、lw是線寬度、ls是線的風格、marker,ms是標記點型式和大小

  ◇調整座標大小優化圖形
plt.axis("equal")                #額外加上這行來優化圖形
  
t = np.linspace(0, 2*np.pi, 300)
x = np.cos(t)
y = np.sin(t)
plt.plot(x, y, "r", lw=6)

  ◇目前所在的figure和axis
#在matplotlib上畫圖，其實有一個大的figure，實際圖是畫在axis上的(每個figure可以有很多axis)
fig = plt.gcf()
ax = plt.gca()

  2. plt.scatter。和plt.plot是兩大畫圖指令

#畫點圖
x = np.linspace(0, 6.28, 50)
y = np.sin(x) + 0.4*np.random.randn(50)    #由0.4*np.random.randn(50)這行來加一點雜訊

plt.scatter(x, y)

  ◇常用參數設定
# c是顏色、s是點的大小、alpha是不透明度、marker是點的型式
plt.scatter(x, y, s=100, alpha=0.5)

  ◇有趣的分類標色法
c = np.random.randint(0, 3, 50)    #在0,1,2中隨機抽50個亂數

plt.scatter(x, y, s=100, c=c, alpha=0.5)

  ◇顏色主題
#可由不同的color map去調整配色
#詳見https://matplotlib.org/users/colormaps.html
plt.scatter(x, y, s=100, c=c ,map="Paired")

  3. 多圖同時呈現
#plt.subplot(列數, 行數, 圖形編號)

x =np.linspace(0, 10, 100)

plt.subplot(2, 2, 1)
plt.plot(x, np.sin(x))

plt.subplot(2, 2, 2)
plt.plot(x, np.log(x+1))

plt.subplot(2, 2, 3)
plt.plot(x, (x-5)**2)

plt.subplot(2, 2, 4)
plt.plot(x, np.sin(x)+0.3*np.cos(5*x))

  4.活用filter
  
x = np.linspace(-5, 5, 500)
y = np.sinc(x)

plt.plot(x, y, lw=6)
plt.plot(x[y>0], y[y>0], "o")

 5.meshgrid概念。產生格點，分成x,y座標，由下而上一列列排出，用於畫3D、contour map
 
 ◇等高線應用
 
x = np.array([1, 2, 3, 4])
y = np.array([5, 6, 7, 8])

X, Y = np.meshgrid(x, y)
z = np.random.randint(1, 3, (4, 4))
  
plt.contour(X, Y, Z)
plt.scatter(X.ravel(), Y.ravel(), c=Z.ravel())    #X.ravel()是將陣列拉平，即變成一維陣列
plt.contourf(X, Y, Z)   #填充型等高線

  -其他例子
  
x = np.array([1, 2, 3, 4])
y = np.array([5, 6, 7, 8])

X, Y = np.meshgrid(x, y)

for i in range(9):
    plz.subplot(3, 3, i+1)
    z = np.random.randint(1, 3, (4, 4))
    plzt.axis("off")
    plt.contour(X, Y, Z, camp="Set2")






■其他

◆當我們不知道函式怎麼用的時候，可以按 shift + tab
